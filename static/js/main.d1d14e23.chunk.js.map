{"version":3,"sources":["hocs/require-authentication.jsx","components/common.jsx","utils.jsx","theme.jsx","serviceWorkerRegistration.js","fonts/BadScript-Regular.ttf","index.jsx"],"names":["Authenticate","WrappedComponent","props","commonUtils","getUserInfo","to","replace","ScrollToTop","pathname","useLocation","useEffect","window","scroll","MutedText","children","sx","paddingX","color","display","parseCookie","str","Object","fromEntries","split","map","cookie","parsedCookies","document","JSON","parse","atob","userInfo","theme","createTheme","palette","primary","main","inverse","cta","alpha","secondary","ternary","muted","button","faded","black","social","youtube","facebook","twitter","instagram","heart","react","memorycard","background","form","stepper","body","input","basepage","typography","badscript","fontFamily","fontDisplay","textTransform","fontSize","responsiveFontSizes","Boolean","location","hostname","match","bucket","process","authURL","LazyApp","lazy","LazyCreateMemory","LazyViewMemory","LazyMemories","MemoriesRoute","CreateMemoryRoute","ViewMemoryRoute","loading","Stack","direction","justifyContent","alignItems","spacing","position","top","right","transform","backgroundColor","boxShadow","padding","CircularProgress","Typography","variant","ReactDOM","render","StrictMode","ThemeProvider","PrelaunchTheme","basename","exact","path","element","fallback","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d1d14e23.chunk.js","sourcesContent":["import { Navigate } from 'react-router-dom';\nimport commonUtils from '../utils';\n\nfunction Authenticate(WrappedComponent) {\n  // eslint-disable-next-line\n  return function (props) {\n    const cookieValue = commonUtils.getUserInfo();\n    const isLoggedIn = cookieValue !== '';\n\n    if (isLoggedIn === true) {\n      // eslint-disable-next-line\n      return <WrappedComponent {...props} />;\n    }\n\n    return <Navigate to=\"/login\" replace />;\n  };\n}\n\nexport default Authenticate;\n","import PropTypes from 'prop-types';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\nimport { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nexport function ScrollToTop() {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scroll(0, 0);\n  }, [pathname]);\n\n  return null;\n}\n\nexport function MutedText({ children }) {\n  return (\n    <Typography sx={{ paddingX: 2, color: 'muted.main', display: 'inline' }}>\n      {children}\n    </Typography>\n  );\n}\n\nexport function LanguageChanger({ language, setEnglish, setBengali }) {\n  return (\n    <Box sx={{ display: 'flex', justifyContent: 'center', p: 2 }}>\n      <ToggleButtonGroup\n        exclusive\n        value={language}\n        aria-label=\"language change\"\n        align=\"center\"\n        color=\"primary\"\n      >\n        <ToggleButton\n          value=\"english\"\n          onClick={setEnglish}\n          sx={{ border: 2, borderColor: 'primary.main' }}\n        >\n          <Typography variant=\"h6\">English</Typography>\n        </ToggleButton>\n        <ToggleButton\n          value=\"bengali\"\n          onClick={setBengali}\n          sx={{ border: 2, borderColor: 'primary.main' }}\n        >\n          <Typography variant=\"h6\">বাংলা</Typography>\n        </ToggleButton>\n      </ToggleButtonGroup>\n    </Box>\n  );\n}\n\nMutedText.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nLanguageChanger.propTypes = {\n  language: PropTypes.string.isRequired,\n  setEnglish: PropTypes.func.isRequired,\n  setBengali: PropTypes.func.isRequired,\n};\n","const parseCookie = (str) => Object.fromEntries(str.split(';').map((cookie) => cookie.split('=', 2)));\n\nfunction getUserInfo() {\n  const parsedCookies = parseCookie(document.cookie);\n  if ('userInfo' in parsedCookies) {\n    return JSON.parse(atob(parsedCookies.userInfo));\n  }\n  return '';\n}\n\nexport default {\n  parseCookie,\n  getUserInfo,\n};\n","import { alpha, createTheme, responsiveFontSizes } from '@mui/material/styles';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#0e516a',\n      inverse: '#F1AE95',\n      cta: alpha('#0e516a', 0.4),\n    },\n    secondary: {\n      main: '#ffc745',\n    },\n    ternary: {\n      main: '#FFA500',\n    },\n    muted: {\n      main: '#6c757d',\n    },\n    button: {\n      main: '#ffffff',\n    },\n    faded: {\n      black: alpha('#000', 0.7),\n    },\n    social: {\n      youtube: '#CD201F',\n      facebook: '#1877F2',\n      twitter: '#1DA1F2',\n      instagram: '#E4405F',\n      heart: '#6b0000',\n      react: '#61dbfb',\n    },\n    memorycard: {\n      background: '#dff2f3',\n    },\n    form: {\n      stepper: '#f1f1f1',\n      body: '#f9ffff',\n      input: alpha('#fff', 0.5),\n    },\n    basepage: {\n      background: '#9e9e9e',\n    },\n  },\n  typography: {\n    badscript: {\n      fontFamily: 'BadScript',\n      fontDisplay: 'swap',\n    },\n    button: {\n      textTransform: 'none',\n      fontSize: '1rem',\n    },\n  },\n});\n\nexport default responsiveFontSizes(theme);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              /* eslint-disable no-console */\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://cra.link/PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              /* eslint-disable no-console */\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      /* eslint-disable no-console */\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      /* eslint-disable no-console */\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          /* eslint-disable no-console */\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://cra.link/PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","export default __webpack_public_path__ + \"static/media/BadScript-Regular.a7245c62.ttf\";","import React, { Suspense, lazy } from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from '@mui/material/styles';\nimport { HashRouter, Routes, Route } from 'react-router-dom';\nimport Stack from '@mui/material/Stack';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Typography from '@mui/material/Typography';\n\nimport './index.css';\n//  import App from './App';\n//  import CreateMemory from './pages/memory/Create';\n//  import Memories from './pages/memories/List';\nimport PrelaunchTheme from './theme';\n//  import ViewMemory from './pages/memory/View';\nimport { ScrollToTop } from './components/common';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport Authenticate from './hocs/require-authentication';\n\nimport './fonts/BadScript-Regular.ttf';\n\nconst bucket = process.env.REACT_APP_S3_BUCKET;\nconst authURL = process.env.REACT_APP_AUTH_URL;\n\nconst LazyApp = lazy(() => import('./App'));\nconst LazyCreateMemory = lazy(() => import('./pages/memory/CreateMemory'));\nconst LazyViewMemory = lazy(() => import('./pages/memory/ViewMemory'));\nconst LazyMemories = lazy(() => import('./pages/memories/Memories'));\n\nconst MemoriesRoute = Authenticate(LazyMemories);\nconst CreateMemoryRoute = Authenticate(LazyCreateMemory);\nconst ViewMemoryRoute = Authenticate(LazyViewMemory);\n\nconst loading = (\n  <Stack\n    direction=\"row\"\n    justifyContent=\"space-between\"\n    alignItems=\"center\"\n    spacing={2}\n    sx={{\n      position: 'absolute', top: '50vh', right: '50vw', transform: 'translate(50%, -50%)', backgroundColor: 'form.input', boxShadow: 10, padding: 2,\n    }}\n  >\n    <CircularProgress />\n    <Typography variant=\"h6\">Loading ...</Typography>\n  </Stack>\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={PrelaunchTheme}>\n      <HashRouter basename={process.env.PUBLIC_URL}>\n        <ScrollToTop />\n        <Routes>\n          <Route\n            exact\n            path=\"/\"\n            element={(\n              <Suspense fallback={loading}>\n                <MemoriesRoute bucket={bucket} authURL={authURL} />\n              </Suspense>\n            )}\n          />\n          <Route\n            path=\"/login\"\n            element={(\n              <Suspense fallback={loading}>\n                <LazyApp authURL={authURL} />\n              </Suspense>\n            )}\n          />\n          <Route\n            exact\n            path=\"/memories\"\n            element={(\n              <Suspense fallback={loading}>\n                <MemoriesRoute bucket={bucket} authURL={authURL} />\n              </Suspense>\n            )}\n          />\n          <Route\n            path=\"/memory/create\"\n            element={(\n              <Suspense fallback={loading}>\n                <CreateMemoryRoute bucket={bucket} authURL={authURL} />\n              </Suspense>\n            )}\n          />\n          <Route\n            path=\"/memory/:memoryId\"\n            element={(\n              <Suspense fallback={loading}>\n                <ViewMemoryRoute bucket={bucket} authURL={authURL} />\n              </Suspense>\n            )}\n          />\n          <Route\n            path=\"*\"\n            element={(\n              <Suspense fallback={<div>Loading...</div>}>\n                <LazyApp authURL={authURL} />\n              </Suspense>\n            )}\n          />\n        </Routes>\n      </HashRouter>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n"],"sourceRoot":""}